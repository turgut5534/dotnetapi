// <auto-generated />
using System;
using Forecast.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Forecast.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230407112211_addTables")]
    partial class addTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.1.23111.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Forecast.Models.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Clouds")
                        .HasColumnType("integer");

                    b.Property<long>("Dt")
                        .HasColumnType("bigint");

                    b.Property<int>("GrndLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<int>("Pressure")
                        .HasColumnType("integer");

                    b.Property<float?>("Rain1h")
                        .HasColumnType("real");

                    b.Property<float?>("Rain3h")
                        .HasColumnType("real");

                    b.Property<int>("SeaLevel")
                        .HasColumnType("integer");

                    b.Property<float?>("Snow1h")
                        .HasColumnType("real");

                    b.Property<float?>("Snow3h")
                        .HasColumnType("real");

                    b.Property<float>("TempMax")
                        .HasColumnType("real");

                    b.Property<float>("TempMin")
                        .HasColumnType("real");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<int?>("Visibility")
                        .HasColumnType("integer");

                    b.Property<string>("WeatherDescription")
                        .HasColumnType("text");

                    b.Property<string>("WeatherIcon")
                        .HasColumnType("text");

                    b.Property<int>("WeatherId")
                        .HasColumnType("integer");

                    b.Property<int>("WeatherLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("WeatherMain")
                        .HasColumnType("text");

                    b.Property<float>("WindDeg")
                        .HasColumnType("real");

                    b.Property<float>("WindGust")
                        .HasColumnType("real");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.Property<string>("dt_txt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WeatherLocationId");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("Forecast.Models.WeatherLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("WeatherLocations");
                });

            modelBuilder.Entity("Forecast.Models.Weather", b =>
                {
                    b.HasOne("Forecast.Models.WeatherLocation", "WeatherLocation")
                        .WithMany("Weathers")
                        .HasForeignKey("WeatherLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeatherLocation");
                });

            modelBuilder.Entity("Forecast.Models.WeatherLocation", b =>
                {
                    b.Navigation("Weathers");
                });
#pragma warning restore 612, 618
        }
    }
}
